/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * Quickstart API Reference
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases. 

To use the Quickstart API, you must have the following features enabled on your tenant:
 
* [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization) 
* [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)

To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/). 
We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.


 * OpenAPI spec version: 2024-01-24
 */
import type {
  Account,
  AccountCreateRequest,
  AccountPatchRequest,
  AccountPreviewRequest,
  AccountPreviewResponse,
  ActivateOrderParams,
  ActivateSubscriptionParams,
  ApplyCreditMemoParams,
  ApplyPaymentParams,
  ApplyUnapplyCreditMemo,
  BillRun,
  BillRunCreateRequest,
  BillRunListResponse,
  BillRunPostRequest,
  BillRunPreview,
  BillRunPreviewCreateRequest,
  BillingDocument,
  BillingDocumentCreateRequest,
  BillingDocumentItemListResponse,
  BillingDocumentListResponse,
  CancelBillRunParams,
  CancelCreditMemoParams,
  CancelDebitMemoParams,
  CancelInvoiceParams,
  CancelOrderParams,
  CancelPaymentParams,
  CancelPaymentScheduleItemParams,
  CancelPaymentScheduleParams,
  CancelQueryRunParams,
  CancelRefundParams,
  CancelSubscriptionParams,
  CancelSubscriptionRequest,
  Contact,
  ContactCreateRequest,
  ContactPatchRequest,
  CreateAccountParams,
  CreateBillRunParams,
  CreateBillRunPreviewParams,
  CreateContactParams,
  CreateCreditMemoParams,
  CreateCustomObjectParams,
  CreateDebitMemoParams,
  CreateFulfillmentItemParams,
  CreateFulfillmentItemsParams,
  CreateFulfillmentParams,
  CreateFulfillmentsParams,
  CreateInvoiceParams,
  CreateOrderParams,
  CreatePaymentMethodParams,
  CreatePaymentParams,
  CreatePaymentRunsParams,
  CreatePaymentScheduleItemParams,
  CreatePaymentScheduleParams,
  CreatePlanParams,
  CreatePriceParams,
  CreateProductParams,
  CreateQueryRunParams,
  CreateRefundParams,
  CreateSubscriptionParams,
  CreateTaxationItemParams,
  CreateUsageParams,
  CreditMemo,
  CreditMemoCreateRequest,
  CreditMemoItemListResponse,
  CreditMemoListResponse,
  CreditMemoPatchRequest,
  CustomObject,
  CustomObjectCreateRequest,
  CustomObjectPatchRequest,
  DebitMemo,
  DebitMemoCreateRequest,
  DebitMemoItemListResponse,
  DebitMemoListResponse,
  DebitMemoPatchRequest,
  FilfillmentItemListResponse,
  FilfillmentListResponse,
  Fulfillment,
  FulfillmentCreateBulkRequest,
  FulfillmentCreateBulkResponse,
  FulfillmentCreateRequest,
  FulfillmentItem,
  FulfillmentItemCreateBulkRequest,
  FulfillmentItemCreateBulkResponse,
  FulfillmentItemCreateRequest,
  FulfillmentItemPatchRequest,
  FulfillmentPatchRequest,
  GenerateBillingDocumentsAccountRequest,
  GenerateBillingDocumentsAccountResponse,
  GetAccountParams,
  GetAccountsParams,
  GetBillRunParams,
  GetBillRunPreviewParams,
  GetBillRunsParams,
  GetBillingDocumentItemsParams,
  GetBillingDocumentParams,
  GetBillingDocumentsParams,
  GetContactParams,
  GetContactsParams,
  GetCreditMemoItemsParams,
  GetCreditMemoParams,
  GetCreditMemosParams,
  GetCustomObjectParams,
  GetCustomObjectsParams,
  GetDebitMemoItemsParams,
  GetDebitMemoParams,
  GetDebitMemoesParams,
  GetFulfillmentItemParams,
  GetFulfillmentItemsParams,
  GetFulfillmentParams,
  GetFulfillmentsParams,
  GetInvoiceItemsParams,
  GetInvoiceParams,
  GetInvoicesParams,
  GetOrderLineItemParams,
  GetOrderParams,
  GetOrdersParams,
  GetPaymentMethodByIdParams,
  GetPaymentMethodsParams,
  GetPaymentParams,
  GetPaymentRunParams,
  GetPaymentRunsParams,
  GetPaymentScheduleItemParams,
  GetPaymentScheduleParams,
  GetPaymentsParams,
  GetPlanParams,
  GetPlansParams,
  GetPriceParams,
  GetPricesParams,
  GetProductParams,
  GetProductsParams,
  GetQueryRunParams,
  GetRefundParams,
  GetRefundsParams,
  GetSubscriptionByKeyParams,
  GetSubscriptionByVersionParams,
  GetSubscriptionItemsParams,
  GetSubscriptionPlanParams,
  GetSubscriptionPlansParams,
  GetSubscriptionsParams,
  GetTaxationItemParams,
  GetTaxationItemsParams,
  GetUsageParams,
  GetUsageRecordsParams,
  Invoice,
  InvoiceCreateRequest,
  InvoiceItemListResponse,
  InvoiceListResponse,
  InvoicePatchRequest,
  InvoiceReverseRequest,
  LineItemPatchRequest,
  ListAccountResponse,
  ListContactResponse,
  ListCustomObjectResponse,
  ListUsageResponse,
  Order,
  OrderCancelResponse,
  OrderCancellationRequest,
  OrderCreateRequest,
  OrderLineItem,
  OrderListResponse,
  OrderPreviewCreateRequest,
  OrderPreviewResponse,
  PatchCreditMemoParams,
  PatchDebitMemoParams,
  PatchInvoiceParams,
  PatchOrderLineItemParams,
  PatchPriceParams,
  PatchSubscriptionParams,
  PauseSubscriptionParams,
  PauseSubscriptionRequest,
  PayDebitMemoParams,
  PayDebitMemoRequest,
  PayInvoiceParams,
  PayInvoiceRequest,
  Payment,
  PaymentApplyUnapplyRequest,
  PaymentCreateRequest,
  PaymentListResponse,
  PaymentMethod,
  PaymentMethodAuthorizationRequest,
  PaymentMethodAuthorizationResponse,
  PaymentMethodCreateRequest,
  PaymentMethodListResponse,
  PaymentMethodPatchRequest,
  PaymentMethodVerificationRequest,
  PaymentMethodVoidAuthorizationRequest,
  PaymentPatchRequest,
  PaymentRun,
  PaymentRunCreateRequest,
  PaymentRunListResponse,
  PaymentRunPatchRequest,
  PaymentSchedule,
  PaymentScheduleCancel,
  PaymentScheduleCreateRequest,
  PaymentScheduleItem,
  PaymentScheduleItemCreateRequest,
  PaymentScheduleItemPatch,
  PaymentScheduleItemRetry,
  PaymentSchedulePatchRequest,
  Plan,
  PlanCreateRequest,
  PlanListResponse,
  PlanPatchRequest,
  PostBillRunParams,
  PostBillingDocumentParams,
  PostCreditMemoParams,
  PostInvoiceParams,
  PostsDebitMemoParams,
  Price,
  PriceCreateRequest,
  PriceListResponse,
  PricePatchRequest,
  Product,
  ProductCreateRequest,
  ProductListResponse,
  ProductPatchRequest,
  QueryRun,
  QueryRunCreateRequest,
  Refund,
  RefundCreateRequest,
  RefundListResponse,
  RefundPatchRequest,
  ResumeSubscriptionParams,
  ResumeSubscriptionRequest,
  RetryPaymentScheduleItemParams,
  ReverseInvoiceParams,
  RunWorkflowRequest,
  ScrubContactParams,
  SkipPaymentScheduleItemParams,
  Subscription,
  SubscriptionActivateRequest,
  SubscriptionCancelResponse,
  SubscriptionCreateRequest,
  SubscriptionItemListResponse,
  SubscriptionListResponse,
  SubscriptionPatchRequest,
  SubscriptionPlan,
  SubscriptionPlanListResponse,
  SubscriptionPreviewExistingRequest,
  SubscriptionPreviewRequest,
  SubscriptionPreviewResponse,
  SubscriptionVersionListResponse,
  TaxationItem,
  TaxationItemCreateRequest,
  TaxationItemListResponse,
  TaxationItemPatchRequest,
  UnapplyCreditMemoParams,
  UnapplyPaymentParams,
  UncancelSubscriptionParams,
  UnpostCreditMemoParams,
  UnpostInvoiceParams,
  UnpostsDebitMemoParams,
  UpdateAccountParams,
  UpdateContactParams,
  UpdateCustomObjectParams,
  UpdateFulfillmentItemParams,
  UpdateFulfillmentParams,
  UpdatePaymentMethodParams,
  UpdatePaymentParams,
  UpdatePaymentRunsParams,
  UpdatePaymentScheduleItemParams,
  UpdatePaymentScheduleParams,
  UpdatePlanParams,
  UpdateProductParams,
  UpdateRefundParams,
  UpdateTaxationItemParams,
  UpdateUsageParams,
  Usage,
  UsageCreateRequest,
  UsagePatchRequest,
  VerifyPaymentMethodParams,
  WorkflowRun,
  WriteOffInvoiceParams,
  WriteOffRequest
} from './api';
import { customInstance } from '../custom-instance';

type IsAny<T> = 0 extends 1 & T ? true : false;
type IsUnknown<T> =
  IsAny<T> extends true ? false : unknown extends T ? true : false;
type Primitive = string | number | boolean | bigint | symbol | undefined | null;
type isBuiltin = Primitive | Function | Date | Error | RegExp;
type NonReadonly<T> =
  T extends Exclude<isBuiltin, Error>
    ? T
    : T extends Map<infer Key, infer Value>
      ? Map<NonReadonly<Key>, NonReadonly<Value>>
      : T extends ReadonlyMap<infer Key, infer Value>
        ? Map<NonReadonly<Key>, NonReadonly<Value>>
        : T extends WeakMap<infer Key, infer Value>
          ? WeakMap<NonReadonly<Key>, NonReadonly<Value>>
          : T extends Set<infer Values>
            ? Set<NonReadonly<Values>>
            : T extends ReadonlySet<infer Values>
              ? Set<NonReadonly<Values>>
              : T extends WeakSet<infer Values>
                ? WeakSet<NonReadonly<Values>>
                : T extends Promise<infer Value>
                  ? Promise<NonReadonly<Value>>
                  : T extends {}
                    ? { -readonly [Key in keyof T]: NonReadonly<T[Key]> }
                    : IsUnknown<T> extends true
                      ? unknown
                      : T;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getQuickstartAPIReference = () => {
  /**
   * Returns a dictionary with a data property that contains an array of accounts, starting after the cursor, if used. Each entry in the array is a separate account object. If no more accounts are available, the resulting array will be empty. This request should never return an error.
   * @summary List accounts
   */
  const getAccounts = (
    params?: GetAccountsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<ListAccountResponse>(
      { url: `/accounts`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates a new account object.
   * @summary Create an account
   */
  const createAccount = (
    accountCreateRequest: NonReadonly<AccountCreateRequest>,
    params?: CreateAccountParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Account>(
      {
        url: `/accounts`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: accountCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Retrieves the account with the given ID.
   * @summary Retrieve an account
   */
  const getAccount = (
    accountId: string,
    params?: GetAccountParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Account>(
      { url: `/accounts/${accountId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Updates the specified account by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
   * @summary Update an account
   */
  const updateAccount = (
    accountId: string,
    accountPatchRequest: NonReadonly<AccountPatchRequest>,
    params?: UpdateAccountParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Account>(
      {
        url: `/accounts/${accountId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: accountPatchRequest,
        params
      },
      options
    );
  };

  /**
   * Permanently deletes an account. It cannot be undone.
   * @summary Delete an account
   */
  const deleteAccount = (
    accountId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/accounts/${accountId}`, method: 'DELETE' },
      options
    );
  };

  /**
   * Creates billing documents for an account.
   * @summary Generate billing documents for an account
   */
  const generateBillingDocuments = (
    accountId: string,
    generateBillingDocumentsAccountRequest: GenerateBillingDocumentsAccountRequest,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<GenerateBillingDocumentsAccountResponse>(
      {
        url: `/accounts/${accountId}/bill`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: generateBillingDocumentsAccountRequest
      },
      options
    );
  };

  /**
   * Generates a preview of future invoice and credit memo items for a customer account.              Previewing a customer account shows you how much a single customer will be invoiced from the most recent invoice to a specific end of term date in the future.      <br/>      Previewing a customer account only calculates taxes for charges if you use <a href='https://knowledgecenter.zuora.com/Billing/Taxes/A_Zuora_Tax' target='_blank'>Zuora Tax</a> and the price associated with the invoice item is tax inclusive; otherwise, it does not calculate taxes.
   * @summary Preview an account
   */
  const previewAccount = (
    accountId: string,
    accountPreviewRequest: AccountPreviewRequest,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<AccountPreviewResponse>(
      {
        url: `/accounts/${accountId}/preview`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: accountPreviewRequest
      },
      options
    );
  };

  /**
   * Retrieves the billing document with the given ID.
   * @summary Retrieve a billing document
   */
  const getBillingDocument = (
    billingDocumentId: string,
    params?: GetBillingDocumentParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<BillingDocument>(
      { url: `/billing_documents/${billingDocumentId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Returns a dictionary with a data property that contains an array of billing documents, starting after cursor. Each entry in the array is a separate billing document object. If no more billing documents are available, the resulting array will be empty. This request should never return an error.
   * @summary List billing documents
   */
  const getBillingDocuments = (
    params?: GetBillingDocumentsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<BillingDocumentListResponse>(
      { url: `/billing_documents`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates different types of billing document objects, including invoices, credit memos, and debit memos.
   * @summary Create a billing document
   */
  const postBillingDocument = (
    billingDocumentCreateRequest: BillingDocumentCreateRequest,
    params?: PostBillingDocumentParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<BillingDocument>(
      {
        url: `/billing_documents`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: billingDocumentCreateRequest,
        params
      },
      options
    );
  };

  /**
   * List billing document items
   * @summary List billing document items
   */
  const getBillingDocumentItems = (
    params?: GetBillingDocumentItemsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<BillingDocumentItemListResponse>(
      { url: `/billing_document_items`, method: 'GET', params },
      options
    );
  };

  /**
   * Retrieves the contact with the given ID.
   * @summary Retrieve a contact
   */
  const getContact = (
    contactId: string,
    params?: GetContactParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Contact>(
      { url: `/contacts/${contactId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Updates the specified contact by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
   * @summary Update a contact
   */
  const updateContact = (
    contactId: string,
    contactPatchRequest: NonReadonly<ContactPatchRequest>,
    params?: UpdateContactParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Contact>(
      {
        url: `/contacts/${contactId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: contactPatchRequest,
        params
      },
      options
    );
  };

  /**
   * Permanently deletes a contact. It cannot be undone.
   * @summary Delete a contact
   */
  const deleteContact = (
    contactId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/contacts/${contactId}`, method: 'DELETE' },
      options
    );
  };

  /**
   * Returns a  dictionary with a data property that contains an array of contacts, starting after the cursor, if used. Each entry in the array is a separate contact object. If no more contacts are available, the resulting array will be empty. This request should never return an error.
   * @summary List contacts
   */
  const getContacts = (
    params?: GetContactsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<ListContactResponse>(
      { url: `/contacts`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates a new contact object.
   * @summary Create a contact
   */
  const createContact = (
    contactCreateRequest: NonReadonly<ContactCreateRequest>,
    params?: CreateContactParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Contact>(
      {
        url: `/contacts`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: contactCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Scrubs the sensitive data for the contact with the given ID.
   * @summary Scrub a contact
   */
  const scrubContact = (
    contactId: string,
    params?: ScrubContactParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/contacts/${contactId}/scrub`, method: 'POST', params },
      options
    );
  };

  /**
   * Returns a dictionary with a data property that contains an array of payment methods, starting after the cursor, if used. Each entry in the array is a separate payment method object. If no more payment methods are available, the resulting array will be empty. This request should never return an error.
   * @summary List payment methods
   */
  const getPaymentMethods = (
    params?: GetPaymentMethodsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentMethodListResponse>(
      { url: `/payment_methods`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates a new payment method object. See [Payment Pages 2.0 implementation overview](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/1_Payment_Pages_2.0_Implementation_Overview) to learn how to create payment methods through Hosted Payment Pages.
   * @summary Create a payment method
   */
  const createPaymentMethod = (
    paymentMethodCreateRequest: NonReadonly<PaymentMethodCreateRequest>,
    params?: CreatePaymentMethodParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentMethod>(
      {
        url: `/payment_methods`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: paymentMethodCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Retrieves the payment method with the given ID.
   * @summary Retrieve a payment method
   */
  const getPaymentMethodById = (
    paymentMethodId: string,
    params?: GetPaymentMethodByIdParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentMethod>(
      { url: `/payment_methods/${paymentMethodId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Updates the specified payment method by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
   * @summary Update a payment method
   */
  const updatePaymentMethod = (
    paymentMethodId: string,
    paymentMethodPatchRequest: PaymentMethodPatchRequest,
    params?: UpdatePaymentMethodParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentMethod>(
      {
        url: `/payment_methods/${paymentMethodId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: paymentMethodPatchRequest,
        params
      },
      options
    );
  };

  /**
   * Permanently deletes a payment method. It cannot be undone.
   * @summary Delete a payment method
   */
  const deletePaymentMethod = (
    paymentMethodId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/payment_methods/${paymentMethodId}`, method: 'DELETE' },
      options
    );
  };

  /**
   * Sends an authorization request to the corresponding payment gateway to verify the payment method. Supported payment methods are credit cards and Paypal.
   * @summary Verify a payment method
   */
  const verifyPaymentMethod = (
    paymentMethodId: string,
    paymentMethodVerificationRequest: PaymentMethodVerificationRequest,
    params?: VerifyPaymentMethodParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentMethod>(
      {
        url: `/payment_methods/${paymentMethodId}/verify`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: paymentMethodVerificationRequest,
        params
      },
      options
    );
  };

  /**
   * Verifies a payment method and block the amount of fund that will be used for payment.
   * @summary Create a payment authorization
   */
  const authorizePaymentMethod = (
    paymentMethodId: string,
    paymentMethodAuthorizationRequest: PaymentMethodAuthorizationRequest,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentMethodAuthorizationResponse>(
      {
        url: `/payment_methods/${paymentMethodId}/authorize`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: paymentMethodAuthorizationRequest
      },
      options
    );
  };

  /**
   * Cancel or void the blocked fund from the specified payment method.
   * @summary Cancel a payment authorization
   */
  const voidAuthorizationPaymentMethod = (
    paymentMethodId: string,
    paymentMethodVoidAuthorizationRequest: PaymentMethodVoidAuthorizationRequest,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentMethodAuthorizationResponse>(
      {
        url: `/payment_methods/${paymentMethodId}/void_authorization`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: paymentMethodVoidAuthorizationRequest
      },
      options
    );
  };

  /**
   * Scrubs sensitive data such as card number on the specified payment method.
   * @summary Scrub a payment method
   */
  const scrubPaymentMethod = (
    paymentMethodId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/payment_methods/${paymentMethodId}/scrub`, method: 'POST' },
      options
    );
  };

  /**
   * Retrieves the subscription with the given subscription key (number or ID).
   * @summary Retrieve a subscription
   */
  const getSubscriptionByKey = (
    subscriptionId: string,
    params?: GetSubscriptionByKeyParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Subscription>(
      { url: `/subscriptions/${subscriptionId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Updates the specified subscription by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
   * @summary Update a subscription
   */
  const patchSubscription = (
    subscriptionId: string,
    subscriptionPatchRequest: SubscriptionPatchRequest,
    params?: PatchSubscriptionParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Subscription>(
      {
        url: `/subscriptions/${subscriptionId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: subscriptionPatchRequest,
        params
      },
      options
    );
  };

  /**
   * Returns a dictionary with a data property that contains an array of subscriptions, starting after the cursor, if used. Each entry in the array is a separate subscription object. If no more subscriptions are available, the resulting array will be empty. This request should never return an error.
   * @summary List subscriptions
   */
  const getSubscriptions = (
    params?: GetSubscriptionsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<SubscriptionListResponse>(
      { url: `/subscriptions`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates a new subscription.
   * @summary Create a subscription
   */
  const createSubscription = (
    subscriptionCreateRequest: NonReadonly<SubscriptionCreateRequest>,
    params?: CreateSubscriptionParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Subscription>(
      {
        url: `/subscriptions`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: subscriptionCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Pauses a subscription.
   * @summary Pause a subscription
   */
  const pauseSubscription = (
    subscriptionId: string,
    pauseSubscriptionRequest: PauseSubscriptionRequest,
    params?: PauseSubscriptionParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Subscription>(
      {
        url: `/subscriptions/${subscriptionId}/pause`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: pauseSubscriptionRequest,
        params
      },
      options
    );
  };

  /**
   * Resumes a subscription.
   * @summary Resume a subscription
   */
  const resumeSubscription = (
    subscriptionId: string,
    resumeSubscriptionRequest: ResumeSubscriptionRequest,
    params?: ResumeSubscriptionParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Subscription>(
      {
        url: `/subscriptions/${subscriptionId}/resume`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: resumeSubscriptionRequest,
        params
      },
      options
    );
  };

  /**
   * Cancels a subscription.
   * @summary Cancel a subscription
   */
  const cancelSubscription = (
    subscriptionId: string,
    cancelSubscriptionRequest: CancelSubscriptionRequest,
    params?: CancelSubscriptionParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<SubscriptionCancelResponse>(
      {
        url: `/subscriptions/${subscriptionId}/cancel`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: cancelSubscriptionRequest,
        params
      },
      options
    );
  };

  /**
   * Uncancel a cancelled subscription.
   * @deprecated
   * @summary Uncancel a subscription
   */
  const uncancelSubscription = (
    subscriptionId: string,
    subscriptionPatchRequest: SubscriptionPatchRequest,
    params?: UncancelSubscriptionParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Subscription>(
      {
        url: `/subscriptions/${subscriptionId}/keep`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: subscriptionPatchRequest,
        params
      },
      options
    );
  };

  /**
   * A subscription must be active before you can bill your subscribers. Activating a subscription requires entering at least one of the following dates: `contract_effective`, `service_activation`, and `customer_acceptance`. See [Billing Trigger Dates](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/WA_Dates_in_Zuora/B_Subscription_and_Amendment_Dates#Billing_Trigger_Dates) for more information.
   * @summary Activate a subscription
   */
  const activateSubscription = (
    subscriptionId: string,
    subscriptionActivateRequest: SubscriptionActivateRequest,
    params?: ActivateSubscriptionParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Subscription>(
      {
        url: `/subscriptions/${subscriptionId}/activate`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: subscriptionActivateRequest,
        params
      },
      options
    );
  };

  /**
   * You can preview the billing document metrics or the order delta metrics across a specified time frame.
   * @summary Preview a subscription
   */
  const previewSubscription = (
    subscriptionPreviewRequest: NonReadonly<SubscriptionPreviewRequest>,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<SubscriptionPreviewResponse>(
      {
        url: `/subscriptions/preview`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: subscriptionPreviewRequest
      },
      options
    );
  };

  /**
   * You can preview the billing document metrics or the order delta metrics across a specified time frame.
   * @summary Preview an existing subscription
   */
  const previewExistingSubscription = (
    subscriptionId: string,
    subscriptionPreviewExistingRequest: SubscriptionPreviewExistingRequest,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<SubscriptionPreviewResponse>(
      {
        url: `/subscriptions/${subscriptionId}/preview`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: subscriptionPreviewExistingRequest
      },
      options
    );
  };

  /**
   * Lists all versions of the specified subscription.
   * @summary List all versions of a subscription
   */
  const getSubscriptionByVersion = (
    subscriptionId: string,
    params?: GetSubscriptionByVersionParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<SubscriptionVersionListResponse>(
      {
        url: `/subscriptions/${subscriptionId}/versions`,
        method: 'GET',
        params
      },
      options
    );
  };

  /**
   * Run a specified workflow. In the request body, you can include parameters that you want to pass to the workflow. For the parameters to be recognized and picked up by tasks in the workflow, you need to define the parameters first.
   * @summary Run a workflow
   */
  const runWorkflow = (
    workflowId: number,
    runWorkflowRequest: RunWorkflowRequest,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<WorkflowRun>(
      {
        url: `/workflows/${workflowId}/run`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: runWorkflowRequest
      },
      options
    );
  };

  /**
   * Retrieves the product with the given ID.
   * @summary Retrieve a product
   */
  const getProduct = (
    productId: string,
    params?: GetProductParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Product>(
      { url: `/products/${productId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
   * @summary Update a product
   */
  const updateProduct = (
    productId: string,
    productPatchRequest: NonReadonly<ProductPatchRequest>,
    params?: UpdateProductParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Product>(
      {
        url: `/products/${productId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: productPatchRequest,
        params
      },
      options
    );
  };

  /**
   * Permanently deletes a product. It cannot be undone.
   * @summary Delete a product
   */
  const deleteProduct = (
    productId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/products/${productId}`, method: 'DELETE' },
      options
    );
  };

  /**
   * Returns a dictionary with a data property that contains an array of products, starting after the cursor, if used. Each entry in the array is a separate product object. If no more products are available, the resulting array will be empty. This request should never return an error.
   * @summary List products
   */
  const getProducts = (
    params?: GetProductsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<ProductListResponse>(
      { url: `/products`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates a new product object.
   * @summary Create a product
   */
  const createProduct = (
    productCreateRequest: NonReadonly<ProductCreateRequest>,
    params?: CreateProductParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Product>(
      {
        url: `/products`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: productCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Retrieves the plan with the given ID.
   * @summary Retrieve a plan
   */
  const getPlan = (
    planId: string,
    params?: GetPlanParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Plan>(
      { url: `/plans/${planId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Updates the specified plan by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
   * @summary Update a plan
   */
  const updatePlan = (
    planId: string,
    planPatchRequest: NonReadonly<PlanPatchRequest>,
    params?: UpdatePlanParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Plan>(
      {
        url: `/plans/${planId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: planPatchRequest,
        params
      },
      options
    );
  };

  /**
   * Permanently deletes a plan. It cannot be undone.
   * @summary Delete a plan
   */
  const deletePlan = (
    planId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/plans/${planId}`, method: 'DELETE' },
      options
    );
  };

  /**
   * Returns a dictionary with a data property that contains an array of plans, starting after the cursor, if used. Each entry in the array is a separate plan object. If no more plans are available, the resulting array will be empty. This request should never return an error.
   * @summary List plans
   */
  const getPlans = (
    params?: GetPlansParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PlanListResponse>(
      { url: `/plans`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates a new plan for an existing product.
   * @summary Create a plan
   */
  const createPlan = (
    planCreateRequest: NonReadonly<PlanCreateRequest>,
    params?: CreatePlanParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Plan>(
      {
        url: `/plans`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: planCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Retrieves the price with the given ID.
   * @summary Retrieve a price
   */
  const getPrice = (
    priceId: string,
    params?: GetPriceParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Price>(
      { url: `/prices/${priceId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Updates the specified price by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
   * @summary Update a price
   */
  const patchPrice = (
    priceId: string,
    pricePatchRequest: NonReadonly<PricePatchRequest>,
    params?: PatchPriceParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Price>(
      {
        url: `/prices/${priceId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: pricePatchRequest,
        params
      },
      options
    );
  };

  /**
   * Permanently deletes a price. It cannot be undone.
   * @summary Delete a price
   */
  const deletePrice = (
    priceId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/prices/${priceId}`, method: 'DELETE' },
      options
    );
  };

  /**
   * Returns a dictionary with a data property that contains an array of prices, starting after the cursor, if used. Each entry in the array is a separate price object. If no more prices are available, the resulting array will be empty. This request should never return an error.
   * @summary List prices
   */
  const getPrices = (
    params?: GetPricesParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PriceListResponse>(
      { url: `/prices`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates a new price for an existing plan.
   * @summary Create a price
   */
  const createPrice = (
    priceCreateRequest: NonReadonly<PriceCreateRequest>,
    params?: CreatePriceParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Price>(
      {
        url: `/prices`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: priceCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Retrieves the payment with the given ID.
   * @summary Retrieve a payment
   */
  const getPayment = (
    paymentId: string,
    params?: GetPaymentParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Payment>(
      { url: `/payments/${paymentId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Updates the specified payment by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
   * @summary Update a payment
   */
  const updatePayment = (
    paymentId: string,
    paymentPatchRequest: NonReadonly<PaymentPatchRequest>,
    params?: UpdatePaymentParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Payment>(
      {
        url: `/payments/${paymentId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: paymentPatchRequest,
        params
      },
      options
    );
  };

  /**
   * Returns a dictionary with a data property that contains an array of payments, starting after the cursor, if used. Each entry in the array is a separate payment object. If no more payments are available, the resulting array will be empty. This request should never return an error.
   * @summary List payments
   */
  const getPayments = (
    params?: GetPaymentsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentListResponse>(
      { url: `/payments`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates a new payment object.
   * @summary Create a payment
   */
  const createPayment = (
    paymentCreateRequest: NonReadonly<PaymentCreateRequest>,
    params?: CreatePaymentParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Payment>(
      {
        url: `/payments`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: paymentCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Cancels an unapplied payment.
   * @summary Cancel a payment
   */
  const cancelPayment = (
    paymentId: string,
    params?: CancelPaymentParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Payment>(
      { url: `/payments/${paymentId}/cancel`, method: 'POST', params },
      options
    );
  };

  /**
   * Applies a payment to one or more invoices or debit memos.
   * @summary Apply a payment
   */
  const applyPayment = (
    paymentId: string,
    paymentApplyUnapplyRequest: PaymentApplyUnapplyRequest,
    params?: ApplyPaymentParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Payment>(
      {
        url: `/payments/${paymentId}/apply`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: paymentApplyUnapplyRequest,
        params
      },
      options
    );
  };

  /**
   * Unapplies an applied payment.
   * @summary Unapply a payment
   */
  const unapplyPayment = (
    paymentId: string,
    paymentApplyUnapplyRequest: PaymentApplyUnapplyRequest,
    params?: UnapplyPaymentParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Payment>(
      {
        url: `/payments/${paymentId}/unapply`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: paymentApplyUnapplyRequest,
        params
      },
      options
    );
  };

  /**
   * Retrieves the subscription plan with the given ID.
   * @summary Retrieve a subscription plan
   */
  const getSubscriptionPlan = (
    subscriptionPlanId: string,
    params?: GetSubscriptionPlanParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<SubscriptionPlan>(
      {
        url: `/subscription_plans/${subscriptionPlanId}`,
        method: 'GET',
        params
      },
      options
    );
  };

  /**
   * Returns a dictionary with a data property that contains an array of subscription plans, starting after cursor. Each entry in the array is a separate  object. If no more  are available, the resulting array will be empty. This request should never return an error.
   * @summary List subscription plans
   */
  const getSubscriptionPlans = (
    params?: GetSubscriptionPlansParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<SubscriptionPlanListResponse>(
      { url: `/subscription_plans`, method: 'GET', params },
      options
    );
  };

  /**
   * List items contained in subscriptions.
   * @summary List subscription items
   */
  const getSubscriptionItems = (
    params?: GetSubscriptionItemsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<SubscriptionItemListResponse>(
      { url: `/subscription_items`, method: 'GET', params },
      options
    );
  };

  /**
   * Returns a dictionary with a data property that contains an array of refunds, starting after cursor. Each entry in the array is a separate  object. If no more  are available, the resulting array will be empty. This request should never return an error.
   * @summary List refunds
   */
  const getRefunds = (
    params?: GetRefundsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<RefundListResponse>(
      { url: `/refunds`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates a new refund object.
   * @summary Create a refund
   */
  const createRefund = (
    refundCreateRequest: NonReadonly<RefundCreateRequest>,
    params?: CreateRefundParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Refund>(
      {
        url: `/refunds`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: refundCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Retrieves the refund with the given ID.
   * @summary Retrieve a refund
   */
  const getRefund = (
    refundId: string,
    params?: GetRefundParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Refund>(
      { url: `/refunds/${refundId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
   * @summary Update a refund
   */
  const updateRefund = (
    refundId: string,
    refundPatchRequest: RefundPatchRequest,
    params?: UpdateRefundParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Refund>(
      {
        url: `/refunds/${refundId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: refundPatchRequest,
        params
      },
      options
    );
  };

  /**
   * Permanently deletes a refund. Note that once you have deleted a refund, it cannot be undone.
   * @summary Delete a refund
   */
  const deleteRefund = (
    refundId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/refunds/${refundId}`, method: 'DELETE' },
      options
    );
  };

  /**
   * Cancels an unapplied refund.
   * @summary Cancel a refund
   */
  const cancelRefund = (
    refundId: string,
    params?: CancelRefundParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Refund>(
      { url: `/refunds/${refundId}/cancel`, method: 'POST', params },
      options
    );
  };

  /**
   * Returns a list of your custom objects.
   * @summary List custom objects
   */
  const getCustomObjects = (
    customObjectType: string,
    params?: GetCustomObjectsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<ListCustomObjectResponse>(
      { url: `/custom_objects/${customObjectType}`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates a new custom object.
   * @summary Create a custom object
   */
  const createCustomObject = (
    customObjectType: string,
    customObjectCreateRequest: CustomObjectCreateRequest,
    params?: CreateCustomObjectParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<CustomObject>(
      {
        url: `/custom_objects/${customObjectType}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: customObjectCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Retrieves the custom object with the given ID.
   * @summary Retrieve a custom object
   */
  const getCustomObject = (
    customObjectType: string,
    customObjectId: string,
    params?: GetCustomObjectParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<CustomObject>(
      {
        url: `/custom_objects/${customObjectType}/${customObjectId}`,
        method: 'GET',
        params
      },
      options
    );
  };

  /**
   * Updates the specified custom object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
   * @summary Update a custom object
   */
  const updateCustomObject = (
    customObjectType: string,
    customObjectId: string,
    customObjectPatchRequest: CustomObjectPatchRequest,
    params?: UpdateCustomObjectParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<CustomObject>(
      {
        url: `/custom_objects/${customObjectType}/${customObjectId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: customObjectPatchRequest,
        params
      },
      options
    );
  };

  /**
   * Permanently deletes a custom object. It cannot be undone.
   * @summary Delete a custom object
   */
  const deleteCustomObject = (
    customObjectType: string,
    customObjectId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      {
        url: `/custom_objects/${customObjectType}/${customObjectId}`,
        method: 'DELETE'
      },
      options
    );
  };

  /**
   * Retrieves the bill run information with the given ID.
   * @summary Retrieve a bill run
   */
  const getBillRun = (
    billRunId: string,
    params?: GetBillRunParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<BillRun>(
      { url: `/bill_runs/${billRunId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Deletes a bill run. Only the bill runs with the `canceled` status can be deleted.
   * @summary Delete a bill run
   */
  const deleteBillRun = (
    billRunId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/bill_runs/${billRunId}`, method: 'DELETE' },
      options
    );
  };

  /**
   * Returns an array of bill runs. Each entry in the array is a separate bill run object.       If no more bill runs are available, the resulting array will be empty. This request should never return an error.
   * @summary List bill runs
   */
  const getBillRuns = (
    params?: GetBillRunsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<BillRunListResponse>(
      { url: `/bill_runs`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates a bill run on a single account, or a batch of customer accounts.
   * @summary Create a bill run
   */
  const createBillRun = (
    billRunCreateRequest: NonReadonly<BillRunCreateRequest>,
    params?: CreateBillRunParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<BillRun>(
      {
        url: `/bill_runs`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: billRunCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Posts a bill run. Only the bill runs with the `completed` status can be posted.
   * @summary Post a bill run
   */
  const postBillRun = (
    billRunId: string,
    billRunPostRequest: BillRunPostRequest,
    params?: PostBillRunParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<BillRun>(
      {
        url: `/bill_runs/${billRunId}/post`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: billRunPostRequest,
        params
      },
      options
    );
  };

  /**
   * Cancels a bill run. Only the bill run that has no posted invoices can be canceled.
   * @summary Cancel a bill run
   */
  const cancelBillRun = (
    billRunId: string,
    params?: CancelBillRunParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<BillRun>(
      { url: `/bill_runs/${billRunId}/cancel`, method: 'POST', params },
      options
    );
  };

  /**
   * Returns an array of usage records. Each entry in the array is a separate Usage object.         If no more usages are available, the resulting array will be empty. This request should never return an error.
   * @summary List usage records
   */
  const getUsageRecords = (
    params?: GetUsageRecordsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<ListUsageResponse>(
      { url: `/usage_records`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates a new Usage object.
   * @summary Create a usage record
   */
  const createUsage = (
    usageCreateRequest: UsageCreateRequest,
    params?: CreateUsageParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Usage>(
      {
        url: `/usage_records`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: usageCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Retrieves the usage with the given ID.
   * @summary Retrieve a usage record
   */
  const getUsage = (
    id: string,
    params?: GetUsageParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Usage>(
      { url: `/usage_records/${id}`, method: 'GET', params },
      options
    );
  };

  /**
   * Updates the usage record. Any fields on the object not provided in the request are not changed.
   * @summary Update a usage record
   */
  const updateUsage = (
    id: string,
    usagePatchRequest: UsagePatchRequest,
    params?: UpdateUsageParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Usage>(
      {
        url: `/usage_records/${id}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: usagePatchRequest,
        params
      },
      options
    );
  };

  /**
   * Permanently deletes a usage object. It cannot be undone.
   * @summary Delete a usage record
   */
  const deleteUsage = (
    id: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/usage_records/${id}`, method: 'DELETE' },
      options
    );
  };

  /**
   * Lists all or a subset of orders in your tenant.
   * @summary List orders
   */
  const getOrders = (
    params?: GetOrdersParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<OrderListResponse>(
      { url: `/orders`, method: 'GET', params },
      options
    );
  };

  /**
   * You can use this operation to create subscriptions and make changes to existing subscriptions. You can also use this operation to create order line items.      <p> Note that the following limitations apply to this operation:      <ul>       <li>Up to 50 subscriptions are allowed in a single call.</li>      <li>Up to 100 order line items are allowed in an order.</li>       <li>Up to 1000 orders are allowed on a subscription.</li>      </ul>
   * @summary Create an order
   */
  const createOrder = (
    orderCreateRequest: NonReadonly<OrderCreateRequest>,
    params?: CreateOrderParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Order>(
      {
        url: `/orders`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: orderCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Use this operation to retrieve the detailed information about a specific order.
   * @summary Retrieve an order
   */
  const getOrder = (
    orderId: string,
    params?: GetOrderParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Order>(
      { url: `/orders/${orderId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Deletes an order.
   * @summary Delete an order
   */
  const deleteOrder = (
    orderId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/orders/${orderId}`, method: 'DELETE' },
      options
    );
  };

  /**
   * Retrieves the preview of the order delta metrics and invoice items of a specified order. Preview for subscriptions and order line items are both supported. This operation is only an order preview and no order is created.       <p> Note that the following limitations apply to this operation:      <ul>       <li>Up to 50 subscriptions are allowed in a single call.</li>       <li>Up to 100 order line items are allowed in an order preview.</li>       </ul>
   * @summary Preview an order
   */
  const createOrderPreview = (
    orderPreviewCreateRequest: OrderPreviewCreateRequest,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<OrderPreviewResponse>(
      {
        url: `/orders/preview`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: orderPreviewCreateRequest
      },
      options
    );
  };

  /**
   * Activates a draft order.
   * @summary Activate an order
   */
  const activateOrder = (
    orderId: string,
    params?: ActivateOrderParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Order>(
      { url: `/orders/${orderId}/activate`, method: 'POST', params },
      options
    );
  };

  /**
   * Cancels a draft order.
   * @summary Cancel an order
   */
  const cancelOrder = (
    orderId: string,
    orderCancellationRequest: OrderCancellationRequest,
    params?: CancelOrderParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<OrderCancelResponse>(
      {
        url: `/orders/${orderId}/cancel`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: orderCancellationRequest,
        params
      },
      options
    );
  };

  /**
   * Retrieves the invoice with the given invoice ID.
   * @summary Retrieve an invoice
   */
  const getInvoice = (
    invoiceId: string,
    params?: GetInvoiceParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Invoice>(
      { url: `/invoices/${invoiceId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Updates an invoice by setting the values of the specified fields. Any fields not provided in the request remain unchanged.
   * @summary Update an invoice
   */
  const patchInvoice = (
    invoiceId: string,
    invoicePatchRequest: InvoicePatchRequest,
    params?: PatchInvoiceParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Invoice>(
      {
        url: `/invoices/${invoiceId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: invoicePatchRequest,
        params
      },
      options
    );
  };

  /**
   * Deletes an invoice that has not been canceled.
   * @summary Delete an invoice
   */
  const deleteInvoice = (
    invoiceId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/invoices/${invoiceId}`, method: 'DELETE' },
      options
    );
  };

  /**
   * Returns a dictionary with a data property that contains an array of invoices, starting after cursor. Each entry in the array is a separate invoice object. If no more invoices are available, the resulting array will be empty.
   * @summary List invoices
   */
  const getInvoices = (
    params?: GetInvoicesParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<InvoiceListResponse>(
      { url: `/invoices`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates an invoice for a subscription.
   * @summary Create an invoice
   */
  const createInvoice = (
    invoiceCreateRequest: InvoiceCreateRequest,
    params?: CreateInvoiceParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Invoice>(
      {
        url: `/invoices`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: invoiceCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Retrieves information about all items of invoices.
   * @summary List invoice items
   */
  const getInvoiceItems = (
    params?: GetInvoiceItemsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<InvoiceItemListResponse>(
      { url: `/invoice_items`, method: 'GET', params },
      options
    );
  };

  /**
   * Reverses a posted invoice.
   * @summary Reverse an invoice
   */
  const reverseInvoice = (
    invoiceId: string,
    invoiceReverseRequest: InvoiceReverseRequest,
    params?: ReverseInvoiceParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Invoice>(
      {
        url: `/invoices/${invoiceId}/reverse`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: invoiceReverseRequest,
        params
      },
      options
    );
  };

  /**
   * Opens a draft invoice.
   * @summary Post an invoice
   */
  const postInvoice = (
    invoiceId: string,
    params?: PostInvoiceParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Invoice>(
      { url: `/invoices/${invoiceId}/post`, method: 'POST', params },
      options
    );
  };

  /**
   * Unposts an open invoice that has not been applied or refunded, and changes its `state` to `draft`.
   * @summary Unpost an invoice
   */
  const unpostInvoice = (
    invoiceId: string,
    params?: UnpostInvoiceParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Invoice>(
      { url: `/invoices/${invoiceId}/unpost`, method: 'POST', params },
      options
    );
  };

  /**
   * Emails an email to your customer.
   * @summary Email an invoice
   */
  const emailInvoice = (
    invoiceId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/invoices/${invoiceId}/email`, method: 'POST' },
      options
    );
  };

  /**
   * Pays an invoice using an existing payment method.
   * @summary Pay an invoice
   */
  const payInvoice = (
    invoiceId: string,
    payInvoiceRequest: PayInvoiceRequest,
    params?: PayInvoiceParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Invoice>(
      {
        url: `/invoices/${invoiceId}/pay`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: payInvoiceRequest,
        params
      },
      options
    );
  };

  /**
   * Cancels an invoice. Only the invoice with the `draft` status can be canceled.
   * @summary Cancel an invoice
   */
  const cancelInvoice = (
    invoiceId: string,
    params?: CancelInvoiceParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Invoice>(
      { url: `/invoices/${invoiceId}/cancel`, method: 'POST', params },
      options
    );
  };

  /**
   * Writes off an invoice
   * @summary Write off an invoice
   */
  const writeOffInvoice = (
    invoiceId: string,
    writeOffRequest: WriteOffRequest,
    params?: WriteOffInvoiceParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<CreditMemo>(
      {
        url: `/invoices/${invoiceId}/write-off`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: writeOffRequest,
        params
      },
      options
    );
  };

  /**
   * Retrieves the debit memo with the given ID.
   * @summary Retrieve a debit memo
   */
  const getDebitMemo = (
    debitMemoId: string,
    params?: GetDebitMemoParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<DebitMemo>(
      { url: `/debit_memos/${debitMemoId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Updates a debit memo by setting the values of the specified fields. Any fields not provided in the request remain unchanged.
   * @summary Update a debit memo
   */
  const patchDebitMemo = (
    debitMemoId: string,
    debitMemoPatchRequest: DebitMemoPatchRequest,
    params?: PatchDebitMemoParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<DebitMemo>(
      {
        url: `/debit_memos/${debitMemoId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: debitMemoPatchRequest,
        params
      },
      options
    );
  };

  /**
   * Permanently deletes a debit memo. This operation cannot be undone once it is performed.
   * @summary Delete a debit memo
   */
  const deleteDebitMemo = (
    debitMemoId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/debit_memos/${debitMemoId}`, method: 'DELETE' },
      options
    );
  };

  /**
   * Returns a dictionary with a data property that contains an array of debit memoes, starting after cursor. Each entry in the array is a separate invoice object. If no more invoices are available, the resulting array will be empty. This request should never return an error.
   * @summary List debit memos
   */
  const getDebitMemoes = (
    params?: GetDebitMemoesParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<DebitMemoListResponse>(
      { url: `/debit_memos`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates debit memo
   * @summary Create a debit memo
   */
  const createDebitMemo = (
    debitMemoCreateRequest: DebitMemoCreateRequest,
    params?: CreateDebitMemoParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<DebitMemo>(
      {
        url: `/debit_memos`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: debitMemoCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Cancels a debit memo. Only the debit memos with the `draft` status can be canceled.
   * @summary Cancel a debit memo
   */
  const cancelDebitMemo = (
    debitMemoId: string,
    params?: CancelDebitMemoParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<DebitMemo>(
      { url: `/debit_memos/${debitMemoId}/cancel`, method: 'POST', params },
      options
    );
  };

  /**
   * Lists item information on all or a subset of debit memos.
   * @summary List debit memo items
   */
  const getDebitMemoItems = (
    params?: GetDebitMemoItemsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<DebitMemoItemListResponse>(
      { url: `/debit_memo_items`, method: 'GET', params },
      options
    );
  };

  /**
   * Opens a draft debit memo.
   * @summary Post a debit memo
   */
  const postsDebitMemo = (
    debitMemoId: string,
    params?: PostsDebitMemoParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<DebitMemo>(
      { url: `/debit_memos/${debitMemoId}/post`, method: 'POST', params },
      options
    );
  };

  /**
   * Unposts an open debit memo that has not been applied or refunded, and changes its `state` to `draft`.
   * @summary Unpost a debit memo
   */
  const unpostsDebitMemo = (
    debitMemoId: string,
    params?: UnpostsDebitMemoParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<DebitMemo>(
      { url: `/debit_memos/${debitMemoId}/unpost`, method: 'POST', params },
      options
    );
  };

  /**
   * Pays a debit memo using an existing payment method.
   * @summary Pay a debit memo
   */
  const payDebitMemo = (
    debitMemoId: string,
    payDebitMemoRequest: PayDebitMemoRequest,
    params?: PayDebitMemoParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<DebitMemo>(
      {
        url: `/debit_memos/${debitMemoId}/pay`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: payDebitMemoRequest,
        params
      },
      options
    );
  };

  /**
   * Retrieves the credit memo with the given ID.
   * @summary Retrieve a credit memo
   */
  const getCreditMemo = (
    creditMemoId: string,
    params?: GetCreditMemoParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<CreditMemo>(
      { url: `/credit_memos/${creditMemoId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Updates a credit memo by setting the values of the specified fields. Any fields not provided in the request remain unchanged.
   * @summary Update a credit memo
   */
  const patchCreditMemo = (
    creditMemoId: string,
    creditMemoPatchRequest: CreditMemoPatchRequest,
    params?: PatchCreditMemoParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<CreditMemo>(
      {
        url: `/credit_memos/${creditMemoId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: creditMemoPatchRequest,
        params
      },
      options
    );
  };

  /**
   * Permanently deletes a credit memo. This operation cannot be undone once it is performed.
   * @summary Delete a credit memo
   */
  const deleteCreditMemo = (
    creditMemoId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/credit_memos/${creditMemoId}`, method: 'DELETE' },
      options
    );
  };

  /**
   * Returns a dictionary with a data property that contains an array of credit memos, starting after cursor. Each entry in the array is a separate credit memo object. If no more credit memos are available, the resulting array will be empty. This request should never return an error.
   * @summary List credit memos
   */
  const getCreditMemos = (
    params?: GetCreditMemosParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<CreditMemoListResponse>(
      { url: `/credit_memos`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates a new credit memo.
   * @summary Create a credit memo
   */
  const createCreditMemo = (
    creditMemoCreateRequest: CreditMemoCreateRequest,
    params?: CreateCreditMemoParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<CreditMemo>(
      {
        url: `/credit_memos`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: creditMemoCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Retrieves information about all items of credit memos. A credit memo item is a single line item in a credit memo.
   * @summary List credit memo items
   */
  const getCreditMemoItems = (
    params?: GetCreditMemoItemsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<CreditMemoItemListResponse>(
      { url: `/credit_memo_items`, method: 'GET', params },
      options
    );
  };

  /**
   * Apply a credit memo to one or more other billing documents.
   * @summary Apply a credit memo
   */
  const applyCreditMemo = (
    creditMemoId: string,
    applyUnapplyCreditMemo: ApplyUnapplyCreditMemo,
    params?: ApplyCreditMemoParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<CreditMemo>(
      {
        url: `/credit_memos/${creditMemoId}/apply`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: applyUnapplyCreditMemo,
        params
      },
      options
    );
  };

  /**
   * Unapply an applied credit memo.
   * @summary Unapply a credit memo
   */
  const unapplyCreditMemo = (
    creditMemoId: string,
    applyUnapplyCreditMemo: ApplyUnapplyCreditMemo,
    params?: UnapplyCreditMemoParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<CreditMemo>(
      {
        url: `/credit_memos/${creditMemoId}/unapply`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: applyUnapplyCreditMemo,
        params
      },
      options
    );
  };

  /**
   * Unposts an open credit memo that has not been applied, and changes its `state` to `draft`.
   * @summary Unpost a credit memo
   */
  const unpostCreditMemo = (
    creditMemoId: string,
    params?: UnpostCreditMemoParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<CreditMemo>(
      { url: `/credit_memos/${creditMemoId}/unpost`, method: 'POST', params },
      options
    );
  };

  /**
   * Opens a draft credit memo.
   * @summary Post a credit memo
   */
  const postCreditMemo = (
    creditMemoId: string,
    params?: PostCreditMemoParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<CreditMemo>(
      { url: `/credit_memos/${creditMemoId}/post`, method: 'POST', params },
      options
    );
  };

  /**
   * Cancels a credit memo. Only credit memos with the Draft status can be cancelled.
   * @summary Cancel a credit memo
   */
  const cancelCreditMemo = (
    creditMemoId: string,
    params?: CancelCreditMemoParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<CreditMemo>(
      { url: `/credit_memos/${creditMemoId}/cancel`, method: 'POST', params },
      options
    );
  };

  /**
   * Returns an array of taxation items. Each entry in the array is a separate Taxation Item object. If no more taxation items are available, the resulting array will be empty. This request should never return an error.
   * @summary List taxation items
   */
  const getTaxationItems = (
    params?: GetTaxationItemsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<TaxationItemListResponse>(
      { url: `/taxation_items`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates a taxation item.
   * @summary Create a taxation item
   */
  const createTaxationItem = (
    taxationItemCreateRequest: TaxationItemCreateRequest,
    params?: CreateTaxationItemParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<TaxationItem>(
      {
        url: `/taxation_items`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: taxationItemCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Retrieves the taxation item with the given ID.
   * @summary Retrieve a taxation item
   */
  const getTaxationItem = (
    taxationItemId: string,
    params?: GetTaxationItemParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<TaxationItem>(
      { url: `/taxation_items/${taxationItemId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Updates a taxation item by setting the values of the specified fields. Any fields not provided in the request remain unchanged.
   * @summary Update a taxation item
   */
  const updateTaxationItem = (
    taxationItemId: string,
    taxationItemPatchRequest: NonReadonly<TaxationItemPatchRequest>,
    params?: UpdateTaxationItemParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<TaxationItem>(
      {
        url: `/taxation_items/${taxationItemId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: taxationItemPatchRequest,
        params
      },
      options
    );
  };

  /**
   * Permanently deletes a taxation item. This operation cannot be undone once it is performed.
   * @summary Delete a taxation item
   */
  const deleteTaxationItem = (
    taxationItemId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/taxation_items/${taxationItemId}`, method: 'DELETE' },
      options
    );
  };

  /**
   * Returns an array of payment runs. Each entry in the array is a separate payment run object.       If no more payment runs are available, the resulting array will be empty. This request should never return an error.
   * @summary List payment runs
   */
  const getPaymentRuns = (
    params?: GetPaymentRunsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentRunListResponse>(
      { url: `/payment_runs`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates a payment run on a single account, or a batch of customer accounts.
   * @summary Create a payment run
   */
  const createPaymentRuns = (
    paymentRunCreateRequest: PaymentRunCreateRequest,
    params?: CreatePaymentRunsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentRun>(
      {
        url: `/payment_runs`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: paymentRunCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Retrieves the payment run information with the given ID.
   * @summary Retrieve a payment run
   */
  const getPaymentRun = (
    paymentRunId: string,
    params?: GetPaymentRunParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentRun>(
      { url: `/payment_runs/${paymentRunId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Updates a payment run by setting the values of the specified fields. Any fields not provided in the request remain unchanged.
   * @summary Update a payment run
   */
  const updatePaymentRuns = (
    paymentRunId: string,
    paymentRunPatchRequest: PaymentRunPatchRequest,
    params?: UpdatePaymentRunsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentRun>(
      {
        url: `/payment_runs/${paymentRunId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: paymentRunPatchRequest,
        params
      },
      options
    );
  };

  /**
   * Deletes a payment run. Only the payment runs with the `canceled` or `pending` status can be deleted.
   * @summary Delete a payment run
   */
  const deletePaymentRuns = (
    paymentRunId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/payment_runs/${paymentRunId}`, method: 'DELETE' },
      options
    );
  };

  /**
   * Use this operation to retrieve the detailed information about a specific order line item.
   * @summary Retrieve an order line item
   */
  const getOrderLineItem = (
    orderLineItemId: string,
    params?: GetOrderLineItemParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<OrderLineItem>(
      { url: `/order_line_items/${orderLineItemId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Use this operation to update the information of a specific order line item.
   * @summary Update an order line item
   */
  const patchOrderLineItem = (
    orderLineItemId: string,
    lineItemPatchRequest: LineItemPatchRequest,
    params?: PatchOrderLineItemParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<OrderLineItem>(
      {
        url: `/order_line_items/${orderLineItemId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: lineItemPatchRequest,
        params
      },
      options
    );
  };

  /**
   * Retrieves the bill run preview information with the given ID.
   * @summary Retrieve a bill run preview
   */
  const getBillRunPreview = (
    billRunPreviewId: string,
    params?: GetBillRunPreviewParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<BillRunPreview>(
      { url: `/bill_run_previews/${billRunPreviewId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates a bill run preview for a batch of customer accounts.
   * @summary Create a bill run preview
   */
  const createBillRunPreview = (
    billRunPreviewCreateRequest: BillRunPreviewCreateRequest,
    params?: CreateBillRunPreviewParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<BillRunPreview>(
      {
        url: `/bill_run_previews`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: billRunPreviewCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Retrieves the query run with the given ID.
   * @summary Retrieve a query run
   */
  const getQueryRun = (
    queryRunId: string,
    params?: GetQueryRunParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<QueryRun>(
      { url: `/query_runs/${queryRunId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates a new query run job.
   * @summary Create a query run
   */
  const createQueryRun = (
    queryRunCreateRequest: QueryRunCreateRequest,
    params?: CreateQueryRunParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<QueryRun>(
      {
        url: `/query_runs`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: queryRunCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Cancels a query run. This operation is only applicable if the state of the query run is `accepted` or `in_progress`.
   * @summary Cancel a query run
   */
  const cancelQueryRun = (
    queryRunId: string,
    params?: CancelQueryRunParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<QueryRun>(
      { url: `/query_runs/${queryRunId}/cancel`, method: 'POST', params },
      options
    );
  };

  /**
   * Returns a  dictionary with a data property that contains an array of fulfillments, starting after the cursor, if used. Each entry in the array is a separate fulfillment object. If no more fulfillment are available, the resulting array will be empty. This request should never return an error.
   * @summary List fulfilllments
   */
  const getFulfillments = (
    params?: GetFulfillmentsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<FilfillmentListResponse>(
      { url: `/fulfillments`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates a new fulfillment object.
   * @summary Create a fulfillment
   */
  const createFulfillment = (
    fulfillmentCreateRequest: FulfillmentCreateRequest,
    params?: CreateFulfillmentParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Fulfillment>(
      {
        url: `/fulfillments`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: fulfillmentCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Retrieves the fulfillment with the given ID.
   * @summary Retrieve a fulfillment
   */
  const getFulfillment = (
    fulfillmentId: string,
    params?: GetFulfillmentParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Fulfillment>(
      { url: `/fulfillments/${fulfillmentId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Updates the specified fulfillment by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
   * @summary Update a fulfillment
   */
  const updateFulfillment = (
    fulfillmentId: string,
    fulfillmentPatchRequest: FulfillmentPatchRequest,
    params?: UpdateFulfillmentParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<Fulfillment>(
      {
        url: `/fulfillments/${fulfillmentId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: fulfillmentPatchRequest,
        params
      },
      options
    );
  };

  /**
   * Permanently deletes a fulfillment. It cannot be undone.
   * @summary Delete a fulfillment
   */
  const deleteFulfillment = (
    fulfillmentId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/fulfillments/${fulfillmentId}`, method: 'DELETE' },
      options
    );
  };

  /**
   * Retrieves the fulfillment item with the given ID.
   * @summary Retrieve a fulfillment item
   */
  const getFulfillmentItem = (
    fulfillmentItemId: string,
    params?: GetFulfillmentItemParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<FulfillmentItem>(
      {
        url: `/fulfillments_items/${fulfillmentItemId}`,
        method: 'GET',
        params
      },
      options
    );
  };

  /**
   * Updates the specified fulfillment item by setting the values of the fields passed. Any fields not provided remain unchanged.
   * @summary Update a fulfillment item
   */
  const updateFulfillmentItem = (
    fulfillmentItemId: string,
    fulfillmentItemPatchRequest: FulfillmentItemPatchRequest,
    params?: UpdateFulfillmentItemParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<FulfillmentItem>(
      {
        url: `/fulfillments_items/${fulfillmentItemId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: fulfillmentItemPatchRequest,
        params
      },
      options
    );
  };

  /**
   * Permanently deletes a fulfillment item. This operation cannot be undone.
   * @summary Delete a fulfillment item
   */
  const deleteFulfillmentItem = (
    fulfillmentItemId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/fulfillments_items/${fulfillmentItemId}`, method: 'DELETE' },
      options
    );
  };

  /**
   * Returns a dictionary with a data property that contains an array of fulfillment items, starting after the cursor, if used. Each entry in the array is a separate fulfillment item object. If no more fulfillment item are available, the resulting array will be empty. This request should never return an error.
   * @summary List fulfillment items
   */
  const getFulfillmentItems = (
    params?: GetFulfillmentItemsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<FilfillmentItemListResponse>(
      { url: `/fulfillments_items`, method: 'GET', params },
      options
    );
  };

  /**
   * Creates a new fulfillment item object.
   * @summary Create a fulfillment item
   */
  const createFulfillmentItem = (
    fulfillmentItemCreateRequest: FulfillmentItemCreateRequest,
    params?: CreateFulfillmentItemParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<FulfillmentItem>(
      {
        url: `/fulfillments_items`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: fulfillmentItemCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Creates multiple fulfillments.
   * @summary Create fulfillments
   */
  const createFulfillments = (
    fulfillmentCreateBulkRequest: FulfillmentCreateBulkRequest,
    params?: CreateFulfillmentsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<FulfillmentCreateBulkResponse>(
      {
        url: `/fulfillments/bulk_create`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: fulfillmentCreateBulkRequest,
        params
      },
      options
    );
  };

  /**
   * Bulk create fulfillment items.
   * @summary Create fulfillment items
   */
  const createFulfillmentItems = (
    fulfillmentItemCreateBulkRequest: FulfillmentItemCreateBulkRequest,
    params?: CreateFulfillmentItemsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<FulfillmentItemCreateBulkResponse>(
      {
        url: `/fulfillments_items/bulk_create`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: fulfillmentItemCreateBulkRequest,
        params
      },
      options
    );
  };

  /**
   * Retrieves the payment schedule item with the given ID.
   * @summary Retrieve a payment schedule item
   */
  const getPaymentScheduleItem = (
    paymentScheduleItemId: string,
    params?: GetPaymentScheduleItemParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentScheduleItem>(
      {
        url: `/payment_schedule_items/${paymentScheduleItemId}`,
        method: 'GET',
        params
      },
      options
    );
  };

  /**
   * Updates the specified payment schedule item by setting the values of the parameters passed. Any parameters not provided will remain unchanged.
   * @summary Update a payment schedule item
   */
  const updatePaymentScheduleItem = (
    paymentScheduleItemId: string,
    paymentScheduleItemPatch: PaymentScheduleItemPatch,
    params?: UpdatePaymentScheduleItemParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentScheduleItem>(
      {
        url: `/payment_schedule_items/${paymentScheduleItemId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: paymentScheduleItemPatch,
        params
      },
      options
    );
  };

  /**
   * Creates a new Payment Schedule Item object.
   * @summary Create a payment schedule item
   */
  const createPaymentScheduleItem = (
    paymentScheduleItemCreateRequest: PaymentScheduleItemCreateRequest,
    params?: CreatePaymentScheduleItemParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentScheduleItem>(
      {
        url: `/payment_schedule_items`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: paymentScheduleItemCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Cancels the payment schedule item with the given ID.
   * @summary Cancel a payment schedule item
   */
  const cancelPaymentScheduleItem = (
    paymentScheduleItemId: string,
    params?: CancelPaymentScheduleItemParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentScheduleItem>(
      {
        url: `/payment_schedule_items/${paymentScheduleItemId}/cancel`,
        method: 'POST',
        params
      },
      options
    );
  };

  /**
   * Retries the payment schedule item with the given ID.
   * @summary Retry a payment shedule item
   */
  const retryPaymentScheduleItem = (
    paymentScheduleItemId: string,
    paymentScheduleItemRetry: PaymentScheduleItemRetry,
    params?: RetryPaymentScheduleItemParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentScheduleItem>(
      {
        url: `/payment_schedule_items/${paymentScheduleItemId}/retry`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: paymentScheduleItemRetry,
        params
      },
      options
    );
  };

  /**
   * Skips the payment schedule item with the given ID.
   * @summary Skip a payment schedule item
   */
  const skipPaymentScheduleItem = (
    paymentScheduleItemId: string,
    params?: SkipPaymentScheduleItemParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentScheduleItem>(
      {
        url: `/payment_schedule_items/${paymentScheduleItemId}/skip`,
        method: 'POST',
        params
      },
      options
    );
  };

  /**
   * Retrieves the payment schedule with the given ID.
   * @summary Retrieve a payment schedule
   */
  const getPaymentSchedule = (
    paymentScheduleId: string,
    params?: GetPaymentScheduleParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentSchedule>(
      { url: `/payment_schedules/${paymentScheduleId}`, method: 'GET', params },
      options
    );
  };

  /**
   * Updates the specified payment schedule by setting the values of the parameters passed. Any parameters not provided will remain unchanged.
   * @summary Update a payment schedule
   */
  const updatePaymentSchedule = (
    paymentScheduleId: string,
    paymentSchedulePatchRequest: PaymentSchedulePatchRequest,
    params?: UpdatePaymentScheduleParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentSchedule>(
      {
        url: `/payment_schedules/${paymentScheduleId}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: paymentSchedulePatchRequest,
        params
      },
      options
    );
  };

  /**
   * Creates a new Payment Schedule object.
   * @summary Create a payment schedule
   */
  const createPaymentSchedule = (
    paymentScheduleCreateRequest: PaymentScheduleCreateRequest,
    params?: CreatePaymentScheduleParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentSchedule>(
      {
        url: `/payment_schedules`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: paymentScheduleCreateRequest,
        params
      },
      options
    );
  };

  /**
   * Cancels the payment schedule with the given ID.
   * @summary Cancel a payment schedule
   */
  const cancelPaymentSchedule = (
    paymentScheduleId: string,
    paymentScheduleCancel: PaymentScheduleCancel,
    params?: CancelPaymentScheduleParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaymentSchedule>(
      {
        url: `/payment_schedules/${paymentScheduleId}/cancel`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: paymentScheduleCancel,
        params
      },
      options
    );
  };

  return {
    getAccounts,
    createAccount,
    getAccount,
    updateAccount,
    deleteAccount,
    generateBillingDocuments,
    previewAccount,
    getBillingDocument,
    getBillingDocuments,
    postBillingDocument,
    getBillingDocumentItems,
    getContact,
    updateContact,
    deleteContact,
    getContacts,
    createContact,
    scrubContact,
    getPaymentMethods,
    createPaymentMethod,
    getPaymentMethodById,
    updatePaymentMethod,
    deletePaymentMethod,
    verifyPaymentMethod,
    authorizePaymentMethod,
    voidAuthorizationPaymentMethod,
    scrubPaymentMethod,
    getSubscriptionByKey,
    patchSubscription,
    getSubscriptions,
    createSubscription,
    pauseSubscription,
    resumeSubscription,
    cancelSubscription,
    uncancelSubscription,
    activateSubscription,
    previewSubscription,
    previewExistingSubscription,
    getSubscriptionByVersion,
    runWorkflow,
    getProduct,
    updateProduct,
    deleteProduct,
    getProducts,
    createProduct,
    getPlan,
    updatePlan,
    deletePlan,
    getPlans,
    createPlan,
    getPrice,
    patchPrice,
    deletePrice,
    getPrices,
    createPrice,
    getPayment,
    updatePayment,
    getPayments,
    createPayment,
    cancelPayment,
    applyPayment,
    unapplyPayment,
    getSubscriptionPlan,
    getSubscriptionPlans,
    getSubscriptionItems,
    getRefunds,
    createRefund,
    getRefund,
    updateRefund,
    deleteRefund,
    cancelRefund,
    getCustomObjects,
    createCustomObject,
    getCustomObject,
    updateCustomObject,
    deleteCustomObject,
    getBillRun,
    deleteBillRun,
    getBillRuns,
    createBillRun,
    postBillRun,
    cancelBillRun,
    getUsageRecords,
    createUsage,
    getUsage,
    updateUsage,
    deleteUsage,
    getOrders,
    createOrder,
    getOrder,
    deleteOrder,
    createOrderPreview,
    activateOrder,
    cancelOrder,
    getInvoice,
    patchInvoice,
    deleteInvoice,
    getInvoices,
    createInvoice,
    getInvoiceItems,
    reverseInvoice,
    postInvoice,
    unpostInvoice,
    emailInvoice,
    payInvoice,
    cancelInvoice,
    writeOffInvoice,
    getDebitMemo,
    patchDebitMemo,
    deleteDebitMemo,
    getDebitMemoes,
    createDebitMemo,
    cancelDebitMemo,
    getDebitMemoItems,
    postsDebitMemo,
    unpostsDebitMemo,
    payDebitMemo,
    getCreditMemo,
    patchCreditMemo,
    deleteCreditMemo,
    getCreditMemos,
    createCreditMemo,
    getCreditMemoItems,
    applyCreditMemo,
    unapplyCreditMemo,
    unpostCreditMemo,
    postCreditMemo,
    cancelCreditMemo,
    getTaxationItems,
    createTaxationItem,
    getTaxationItem,
    updateTaxationItem,
    deleteTaxationItem,
    getPaymentRuns,
    createPaymentRuns,
    getPaymentRun,
    updatePaymentRuns,
    deletePaymentRuns,
    getOrderLineItem,
    patchOrderLineItem,
    getBillRunPreview,
    createBillRunPreview,
    getQueryRun,
    createQueryRun,
    cancelQueryRun,
    getFulfillments,
    createFulfillment,
    getFulfillment,
    updateFulfillment,
    deleteFulfillment,
    getFulfillmentItem,
    updateFulfillmentItem,
    deleteFulfillmentItem,
    getFulfillmentItems,
    createFulfillmentItem,
    createFulfillments,
    createFulfillmentItems,
    getPaymentScheduleItem,
    updatePaymentScheduleItem,
    createPaymentScheduleItem,
    cancelPaymentScheduleItem,
    retryPaymentScheduleItem,
    skipPaymentScheduleItem,
    getPaymentSchedule,
    updatePaymentSchedule,
    createPaymentSchedule,
    cancelPaymentSchedule
  };
};
export type GetAccountsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getAccounts']>
  >
>;
export type CreateAccountResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['createAccount']>
  >
>;
export type GetAccountResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getAccount']>
  >
>;
export type UpdateAccountResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['updateAccount']>
  >
>;
export type DeleteAccountResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['deleteAccount']>
  >
>;
export type GenerateBillingDocumentsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['generateBillingDocuments']
    >
  >
>;
export type PreviewAccountResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['previewAccount']>
  >
>;
export type GetBillingDocumentResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['getBillingDocument']
    >
  >
>;
export type GetBillingDocumentsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['getBillingDocuments']
    >
  >
>;
export type PostBillingDocumentResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['postBillingDocument']
    >
  >
>;
export type GetBillingDocumentItemsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['getBillingDocumentItems']
    >
  >
>;
export type GetContactResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getContact']>
  >
>;
export type UpdateContactResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['updateContact']>
  >
>;
export type DeleteContactResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['deleteContact']>
  >
>;
export type GetContactsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getContacts']>
  >
>;
export type CreateContactResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['createContact']>
  >
>;
export type ScrubContactResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['scrubContact']>
  >
>;
export type GetPaymentMethodsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['getPaymentMethods']
    >
  >
>;
export type CreatePaymentMethodResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['createPaymentMethod']
    >
  >
>;
export type GetPaymentMethodByIdResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['getPaymentMethodById']
    >
  >
>;
export type UpdatePaymentMethodResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['updatePaymentMethod']
    >
  >
>;
export type DeletePaymentMethodResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['deletePaymentMethod']
    >
  >
>;
export type VerifyPaymentMethodResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['verifyPaymentMethod']
    >
  >
>;
export type AuthorizePaymentMethodResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['authorizePaymentMethod']
    >
  >
>;
export type VoidAuthorizationPaymentMethodResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<
        typeof getQuickstartAPIReference
      >['voidAuthorizationPaymentMethod']
    >
  >
>;
export type ScrubPaymentMethodResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['scrubPaymentMethod']
    >
  >
>;
export type GetSubscriptionByKeyResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['getSubscriptionByKey']
    >
  >
>;
export type PatchSubscriptionResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['patchSubscription']
    >
  >
>;
export type GetSubscriptionsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getSubscriptions']>
  >
>;
export type CreateSubscriptionResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['createSubscription']
    >
  >
>;
export type PauseSubscriptionResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['pauseSubscription']
    >
  >
>;
export type ResumeSubscriptionResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['resumeSubscription']
    >
  >
>;
export type CancelSubscriptionResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['cancelSubscription']
    >
  >
>;
export type UncancelSubscriptionResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['uncancelSubscription']
    >
  >
>;
export type ActivateSubscriptionResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['activateSubscription']
    >
  >
>;
export type PreviewSubscriptionResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['previewSubscription']
    >
  >
>;
export type PreviewExistingSubscriptionResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<
        typeof getQuickstartAPIReference
      >['previewExistingSubscription']
    >
  >
>;
export type GetSubscriptionByVersionResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['getSubscriptionByVersion']
    >
  >
>;
export type RunWorkflowResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['runWorkflow']>
  >
>;
export type GetProductResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getProduct']>
  >
>;
export type UpdateProductResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['updateProduct']>
  >
>;
export type DeleteProductResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['deleteProduct']>
  >
>;
export type GetProductsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getProducts']>
  >
>;
export type CreateProductResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['createProduct']>
  >
>;
export type GetPlanResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getQuickstartAPIReference>['getPlan']>>
>;
export type UpdatePlanResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['updatePlan']>
  >
>;
export type DeletePlanResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['deletePlan']>
  >
>;
export type GetPlansResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getQuickstartAPIReference>['getPlans']>>
>;
export type CreatePlanResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['createPlan']>
  >
>;
export type GetPriceResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getQuickstartAPIReference>['getPrice']>>
>;
export type PatchPriceResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['patchPrice']>
  >
>;
export type DeletePriceResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['deletePrice']>
  >
>;
export type GetPricesResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getQuickstartAPIReference>['getPrices']>>
>;
export type CreatePriceResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['createPrice']>
  >
>;
export type GetPaymentResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getPayment']>
  >
>;
export type UpdatePaymentResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['updatePayment']>
  >
>;
export type GetPaymentsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getPayments']>
  >
>;
export type CreatePaymentResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['createPayment']>
  >
>;
export type CancelPaymentResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['cancelPayment']>
  >
>;
export type ApplyPaymentResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['applyPayment']>
  >
>;
export type UnapplyPaymentResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['unapplyPayment']>
  >
>;
export type GetSubscriptionPlanResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['getSubscriptionPlan']
    >
  >
>;
export type GetSubscriptionPlansResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['getSubscriptionPlans']
    >
  >
>;
export type GetSubscriptionItemsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['getSubscriptionItems']
    >
  >
>;
export type GetRefundsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getRefunds']>
  >
>;
export type CreateRefundResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['createRefund']>
  >
>;
export type GetRefundResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getQuickstartAPIReference>['getRefund']>>
>;
export type UpdateRefundResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['updateRefund']>
  >
>;
export type DeleteRefundResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['deleteRefund']>
  >
>;
export type CancelRefundResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['cancelRefund']>
  >
>;
export type GetCustomObjectsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getCustomObjects']>
  >
>;
export type CreateCustomObjectResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['createCustomObject']
    >
  >
>;
export type GetCustomObjectResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getCustomObject']>
  >
>;
export type UpdateCustomObjectResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['updateCustomObject']
    >
  >
>;
export type DeleteCustomObjectResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['deleteCustomObject']
    >
  >
>;
export type GetBillRunResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getBillRun']>
  >
>;
export type DeleteBillRunResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['deleteBillRun']>
  >
>;
export type GetBillRunsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getBillRuns']>
  >
>;
export type CreateBillRunResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['createBillRun']>
  >
>;
export type PostBillRunResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['postBillRun']>
  >
>;
export type CancelBillRunResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['cancelBillRun']>
  >
>;
export type GetUsageRecordsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getUsageRecords']>
  >
>;
export type CreateUsageResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['createUsage']>
  >
>;
export type GetUsageResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getQuickstartAPIReference>['getUsage']>>
>;
export type UpdateUsageResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['updateUsage']>
  >
>;
export type DeleteUsageResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['deleteUsage']>
  >
>;
export type GetOrdersResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getQuickstartAPIReference>['getOrders']>>
>;
export type CreateOrderResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['createOrder']>
  >
>;
export type GetOrderResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getQuickstartAPIReference>['getOrder']>>
>;
export type DeleteOrderResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['deleteOrder']>
  >
>;
export type CreateOrderPreviewResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['createOrderPreview']
    >
  >
>;
export type ActivateOrderResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['activateOrder']>
  >
>;
export type CancelOrderResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['cancelOrder']>
  >
>;
export type GetInvoiceResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getInvoice']>
  >
>;
export type PatchInvoiceResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['patchInvoice']>
  >
>;
export type DeleteInvoiceResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['deleteInvoice']>
  >
>;
export type GetInvoicesResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getInvoices']>
  >
>;
export type CreateInvoiceResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['createInvoice']>
  >
>;
export type GetInvoiceItemsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getInvoiceItems']>
  >
>;
export type ReverseInvoiceResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['reverseInvoice']>
  >
>;
export type PostInvoiceResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['postInvoice']>
  >
>;
export type UnpostInvoiceResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['unpostInvoice']>
  >
>;
export type EmailInvoiceResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['emailInvoice']>
  >
>;
export type PayInvoiceResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['payInvoice']>
  >
>;
export type CancelInvoiceResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['cancelInvoice']>
  >
>;
export type WriteOffInvoiceResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['writeOffInvoice']>
  >
>;
export type GetDebitMemoResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getDebitMemo']>
  >
>;
export type PatchDebitMemoResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['patchDebitMemo']>
  >
>;
export type DeleteDebitMemoResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['deleteDebitMemo']>
  >
>;
export type GetDebitMemoesResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getDebitMemoes']>
  >
>;
export type CreateDebitMemoResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['createDebitMemo']>
  >
>;
export type CancelDebitMemoResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['cancelDebitMemo']>
  >
>;
export type GetDebitMemoItemsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['getDebitMemoItems']
    >
  >
>;
export type PostsDebitMemoResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['postsDebitMemo']>
  >
>;
export type UnpostsDebitMemoResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['unpostsDebitMemo']>
  >
>;
export type PayDebitMemoResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['payDebitMemo']>
  >
>;
export type GetCreditMemoResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getCreditMemo']>
  >
>;
export type PatchCreditMemoResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['patchCreditMemo']>
  >
>;
export type DeleteCreditMemoResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['deleteCreditMemo']>
  >
>;
export type GetCreditMemosResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getCreditMemos']>
  >
>;
export type CreateCreditMemoResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['createCreditMemo']>
  >
>;
export type GetCreditMemoItemsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['getCreditMemoItems']
    >
  >
>;
export type ApplyCreditMemoResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['applyCreditMemo']>
  >
>;
export type UnapplyCreditMemoResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['unapplyCreditMemo']
    >
  >
>;
export type UnpostCreditMemoResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['unpostCreditMemo']>
  >
>;
export type PostCreditMemoResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['postCreditMemo']>
  >
>;
export type CancelCreditMemoResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['cancelCreditMemo']>
  >
>;
export type GetTaxationItemsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getTaxationItems']>
  >
>;
export type CreateTaxationItemResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['createTaxationItem']
    >
  >
>;
export type GetTaxationItemResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getTaxationItem']>
  >
>;
export type UpdateTaxationItemResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['updateTaxationItem']
    >
  >
>;
export type DeleteTaxationItemResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['deleteTaxationItem']
    >
  >
>;
export type GetPaymentRunsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getPaymentRuns']>
  >
>;
export type CreatePaymentRunsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['createPaymentRuns']
    >
  >
>;
export type GetPaymentRunResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getPaymentRun']>
  >
>;
export type UpdatePaymentRunsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['updatePaymentRuns']
    >
  >
>;
export type DeletePaymentRunsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['deletePaymentRuns']
    >
  >
>;
export type GetOrderLineItemResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getOrderLineItem']>
  >
>;
export type PatchOrderLineItemResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['patchOrderLineItem']
    >
  >
>;
export type GetBillRunPreviewResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['getBillRunPreview']
    >
  >
>;
export type CreateBillRunPreviewResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['createBillRunPreview']
    >
  >
>;
export type GetQueryRunResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getQueryRun']>
  >
>;
export type CreateQueryRunResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['createQueryRun']>
  >
>;
export type CancelQueryRunResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['cancelQueryRun']>
  >
>;
export type GetFulfillmentsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getFulfillments']>
  >
>;
export type CreateFulfillmentResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['createFulfillment']
    >
  >
>;
export type GetFulfillmentResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getQuickstartAPIReference>['getFulfillment']>
  >
>;
export type UpdateFulfillmentResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['updateFulfillment']
    >
  >
>;
export type DeleteFulfillmentResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['deleteFulfillment']
    >
  >
>;
export type GetFulfillmentItemResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['getFulfillmentItem']
    >
  >
>;
export type UpdateFulfillmentItemResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['updateFulfillmentItem']
    >
  >
>;
export type DeleteFulfillmentItemResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['deleteFulfillmentItem']
    >
  >
>;
export type GetFulfillmentItemsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['getFulfillmentItems']
    >
  >
>;
export type CreateFulfillmentItemResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['createFulfillmentItem']
    >
  >
>;
export type CreateFulfillmentsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['createFulfillments']
    >
  >
>;
export type CreateFulfillmentItemsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['createFulfillmentItems']
    >
  >
>;
export type GetPaymentScheduleItemResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['getPaymentScheduleItem']
    >
  >
>;
export type UpdatePaymentScheduleItemResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['updatePaymentScheduleItem']
    >
  >
>;
export type CreatePaymentScheduleItemResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['createPaymentScheduleItem']
    >
  >
>;
export type CancelPaymentScheduleItemResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['cancelPaymentScheduleItem']
    >
  >
>;
export type RetryPaymentScheduleItemResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['retryPaymentScheduleItem']
    >
  >
>;
export type SkipPaymentScheduleItemResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['skipPaymentScheduleItem']
    >
  >
>;
export type GetPaymentScheduleResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['getPaymentSchedule']
    >
  >
>;
export type UpdatePaymentScheduleResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['updatePaymentSchedule']
    >
  >
>;
export type CreatePaymentScheduleResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['createPaymentSchedule']
    >
  >
>;
export type CancelPaymentScheduleResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getQuickstartAPIReference>['cancelPaymentSchedule']
    >
  >
>;
